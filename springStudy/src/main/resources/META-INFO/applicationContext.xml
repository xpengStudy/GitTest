<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">
        <!-- default-lazy-init="true" 对所有的应用都延迟加载  -->
       <!--http://www.springframework.org/schema/beans/spring-beans.xsd" default-lazy-init="true">-->

    <!-- 配置自己需要的bean  -->
    <!--init-method 方法是再spring实例化spring 容器的时候执行某些方法  destroy-method 是再spring的ioc容器关闭时调用的某些方法-->
    <!-- spring容器的bean 默认是随着容器关闭而销毁 -->
    <bean id="helloWord" class="com.xp.study.pojo.HelloWord" init-method="init" destroy-method="init">
        <property name="name" value="spring"> </property>
    </bean>

    <!-- 配置spring 的第一个接口Bean -->
    <bean id="personService" class="com.xp.study.service.impl.PersonServiceImpl"></bean>
    <!-- 获取bean的第二种方式 -->
    <!-- 这种方式只能是针对类里面的static方法  对于不是静态方法的没有作用  -->
    <bean id="springBeanFactory" class="com.xp.study.pojo.springBeanFactory" factory-method="createHello">
        <property name="name" value="spring"></property>
    </bean>
    <!-- 获取bean 的第三种方式 针对工厂类的所有方法(除了静态方法)-->
    <bean id="springFactory" class="com.xp.study.pojo.springBeanFactory"></bean>
    <bean id="springCreateFactory" factory-bean="springFactory" factory-method="addHello"></bean>
    <!-- spring 再作用域为单例的时候 默认是初始化容器的时候  实例化bean  当lazy-init 为true的时候 则不会再初始化容器的时候实例化bean -->
    <!-- spring 再作用域为prototype 的时候 默认是getbean的时候  实例化bean -->

    <bean id="testAddHello" factory-bean="springFactory" factory-method="testAdd" lazy-init="true"></bean>
    <!-- 每次从容器获取的对象都是一个新对象 默认的是单实例 是同一个对象 -->
    <bean id="personBean" factory-bean="springFactory" factory-method="addPerson" scope="prototype"></bean>


    <!--  开始学习spring 的DI  依赖注入  -->
        <!--第一种方式-->
    <bean id="userResipotroy" class="com.xp.study.resepotory.impl.PersonResipotroyImpl"></bean>
    <bean id="personServiceDi" class="com.xp.study.service.impl.PersonServiceImpl" >
        <property name="userResipotroy" ref="userResipotroy"></property>
    </bean>

</beans>